version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-backend
    ports:
      - "8000:8000"
    volumes:
      # Código fuente para hot-reload en desarrollo
      - ./backend:/app/backend
      # Datos persistentes
      - ./backend/data:/app/backend/data
      # Logs
      - ./backend/logs:/app/backend/logs
    environment:
      # Sobrescribir configuración con variables de entorno
      - EMBEDDING_MODEL_ID=intfloat/multilingual-e5-base
      - LLM_MODEL_PATH=/app/backend/data/models/llm/mistral-7b-instruct-q4_k_m.gguf
      - CHUNK_SIZE=900
      - CHUNK_OVERLAP=150
      - TOP_K=4
      - N_CTX=1024
      - N_THREADS=4
      - TEMPERATURE=0.2
      - MAX_TOKENS=256
      - ALLOWED_ORIGINS=http://localhost:5173,http://127.0.0.1:5173,http://localhost:3000
      - MAX_FILE_SIZE_MB=50
      - RATE_LIMIT_PER_MINUTE=20
      - ENABLE_CACHE=true
      - CACHE_TTL_SECONDS=300
      - LOG_LEVEL=INFO
      - LOG_FILE=logs/app.log
    restart: unless-stopped
    command: uvicorn backend.app:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rag-network

  # Opcional: Redis para caché distribuido (futura implementación)
  # redis:
  #   image: redis:7-alpine
  #   container_name: rag-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   command: redis-server --appendonly yes
  #   networks:
  #     - rag-network

  # Opcional: Prometheus para métricas (futura implementación)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: rag-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus-data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #   networks:
  #     - rag-network

networks:
  rag-network:
    driver: bridge

volumes:
  # redis-data:
  # prometheus-data:
